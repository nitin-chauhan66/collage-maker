{"version":3,"sources":["Collage.js","Gallery.js","usefetch.js","App.js","serviceWorker.js","index.js"],"names":["Collage","drop","allowDrag","collage","document","getElementById","Card","className","Body","Row","Title","onClick","e","url","canvas","toDataURL","format","quality","saveAs","saveImage","download","Button","variant","class","aria-hidden","clear","style","height","id","onDrop","onDragOver","Gallery","images","pending","dragFunc","error","refresh","clickHandler","Spinner","animation","role","map","image","Col","sm","key","src","onDragStart","event","draggable","ACTIONS","reducer","state","action","type","loading","payload","App","useState","setId","title","useReducer","dispatch","useEffect","cancelToken","axios","CancelToken","source","get","token","params","albumId","then","res","data","catch","isCancel","cancel","useFetch","preventDefault","dataTransfer","getData","ratio","width","Newimage","fabric","Image","top","left","console","log","target","add","setData","parseInt","Math","random","setActiveObject","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d64beb97.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {Card,Row,Button} from \"react-bootstrap\";\nimport './Collage.css'\nimport 'fabric-canvas';\nimport { saveAs } from 'file-saver';\n\nexport default function Collage({drop,allowDrag}){\n    const collage = document.getElementById('collage'); \n    function resetCanvas(){\n       collage.canvas.clear();\n    }\n    function saveImage(e){\n        const url = collage.canvas.toDataURL({\n            format: 'jpeg',\n            quality: 1\n        });\n        \n            saveAs(url, \"image.jpg\");\n        \n    }\n    return(\n        <Card className=\"mr-2 collage\">\n             \n            <Card.Body >\n            <Row className=\"justify-content-between\">\n                    <Card.Title className=\"mt-2\">Collage</Card.Title>\n                    <a onClick={(e)=>saveImage(e)} download=\"collage.jpeg\">\n                    <Button variant=\"primary\">\n                    <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                    </Button>\n                    </a>\n                    <Button variant=\"primary\" onClick={resetCanvas}>\n                   <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                   </Button>\n                </Row>\n                \n\n                <Row style={{height:'500px'}}>\n                <fabric-canvas className=\"collage__canvas\" \n                id=\"collage\" \n                onDrop={drop} \n                onDragOver={allowDrag}\n                >\n                </fabric-canvas>\n                </Row>\n            </Card.Body>\n        </Card>\n    )\n}","import React from \"react\";\nimport './Gallery.css'\nimport { Card, Spinner ,Col,Row, Button} from \"react-bootstrap\";\nexport default function Gallery({images,pending,error,dragFunc,refresh,clickHandler}){\n    return(\n       <Card className=\"gallery\">\n           <Card.Body>\n               <Row className=\"justify-content-between\">\n                   <Card.Title className=\"mt-2\">\n                       Gallery\n                   </Card.Title>\n                   <Button variant=\"primary\" onClick={()=>refresh()}>\n                   <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                   </Button>\n               </Row>\n               <Row className=\"justify-content-center gallery__container\">\n               {pending?(\n            <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n            </Spinner>):images.map(image=>{\n                   return (\n                       <Col sm=\"6\" key={image.id}>\n                       <img src={image.url}\n                       className=\"gallery__image\"  \n                       id ={image.id} \n                       onDragStart={(event)=>dragFunc(event)} \n                       draggable={true}\n                       onClick={clickHandler}\n                       />\n                       </Col>\n                   )\n               })}\n               </Row>\n            </Card.Body>\n       </Card>\n    )\n}","import { useReducer,useEffect } from \"react\"\nimport axios from \"axios\";\n\n\nconst ACTIONS = {\n    MAKE_REQUEST:\"MAKE_REQUEST\",\n    GET_DATA:\"GET_DATA\",\n    ERROR:\"ERROR\"\n}\n\nconst BASE_URL = \"https://cors-anywhere.herokuapp.com/http://jsonplaceholder.typicode.com/photos\";\nfunction reducer(state,action){\n    switch (action.type) {\n        case ACTIONS.MAKE_REQUEST:\n            return {...state,loading:true,images:[]}\n        case ACTIONS.GET_DATA:\n            return {...state,loading:false,images:action.payload}\n        case ACTIONS.ERROR:\n            return{...state,loading:false,images:[],error:true}       \n        default:\n            return state;\n    }\n}\nexport default function useFetch(id){\n    const [state,dispatch] = useReducer(reducer,{images:[],loading:true,error:false});\n    useEffect(()=>{\n        const cancelToken = axios.CancelToken.source();\n        \n        dispatch({type:ACTIONS.MAKE_REQUEST});\n      axios.get(BASE_URL,{\n          cancelToken:cancelToken.token,\n          params:{albumId:id}\n      }).then(res=>{\n          dispatch({type:ACTIONS.GET_DATA,payload:res.data})\n      }).catch(e=>{\n          if (axios.isCancel(e)) return;\n          dispatch({type:ACTIONS.ERROR});\n      })\n\n      return () => {\n          cancelToken.cancel()\n      }\n    },[id])\n    return state;\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Row,Col } from 'react-bootstrap';\nimport Collage from './Collage';\nimport Gallery from './Gallery';\nimport useFetch from './usefetch';\nimport {fabric} from \"fabric-canvas\";\n\n\nfunction App() {\n  const [id,setId] = useState(1);\n  document.title = \"Collage Maker\";\n  const {images,loading,error} = useFetch(id);\n  function refresh(){\n    const id = parseInt(Math.random()*10);\n    setId(id);\n  }\n  function allowDrop(e) {\n    e.preventDefault();\n  }\n  \n  function drag(e) {\n    e.dataTransfer.setData(\"image\", e.target.id);\n  }\n  \n  function drop(e) {\n    e.preventDefault();\n    const data = e.dataTransfer.getData(\"image\");\n    const image = document.getElementById(data);\n    const ratio = image.height/image.width;\n    const Newimage  = new fabric.Image(image, {\n      width: 300*ratio, height: 300*ratio,\n      top:100,\n      left:100\n    });\n    console.log(Newimage);\n    e.target.add(Newimage);\n  }\n  function clickHandler(e){\n    const image = document.getElementById(e.target.id);\n    const ratio = image.height/image.width;\n    const Newimage  = new fabric.Image(image, {\n      width: 300*ratio, height: 300*ratio,\n      top:100,left:100\n    });\n    document.getElementById(\"collage\").add(Newimage);\n    document.getElementById(\"collage\").canvas.setActiveObject(Newimage);\n  }\n  return (\n    <div className=\"app\">\n      <h1>Collage Maker</h1>\n      <Row>\n        <Col>\n          <Collage \n          drop={drop} \n          allowDrag={allowDrop}/>\n        </Col>\n        <Col>\n            <Gallery \n            images={images} \n            pending={loading} \n            error={error} \n            dragFunc={drag}\n            refresh={refresh}\n            clickHandler={clickHandler} />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}